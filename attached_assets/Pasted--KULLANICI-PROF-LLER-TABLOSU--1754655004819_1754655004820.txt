-- ============================================================
-- KULLANICI PROFÄ°LLERÄ° TABLOSU
-- ============================================================
CREATE TABLE IF NOT EXISTS public.user_profiles (
    id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
    full_name TEXT,
    role TEXT DEFAULT 'user' CHECK (role IN ('user', 'admin')),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
-- ============================================================
-- MEVZUAT BELGELERÄ° TABLOSU
-- ============================================================
CREATE TABLE IF NOT EXISTS public.mevzuat_documents (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    title TEXT NOT NULL,
    filename TEXT NOT NULL,
    file_url TEXT NOT NULL,
    file_size BIGINT,
    content_preview TEXT,
    upload_date TIMESTAMPTZ DEFAULT NOW(),
    uploaded_by UUID REFERENCES auth.users(id),
    status TEXT DEFAULT 'processing' CHECK (status IN ('processing', 'completed', 'failed')),
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
-- ============================================================
-- VEKTÃ–R EMBEDDINGS TABLOSU
-- ============================================================
CREATE TABLE IF NOT EXISTS public.mevzuat_embeddings (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    document_id UUID REFERENCES public.mevzuat_documents(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    embedding vector(1536), -- OpenAI text-embedding-3-large boyutu
    chunk_index INTEGER,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW()
);
-- ============================================================
-- ARAMA LOGLAR TABLOSU
-- ============================================================
CREATE TABLE IF NOT EXISTS public.search_logs (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id),
    query TEXT NOT NULL,
    results_count INTEGER,
    execution_time FLOAT,
    ip_address INET,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
ðŸŽ¯ AdÄ±m 4: Row Level Security (RLS) PolitikalarÄ±
4.1 RLS'yi EtkinleÅŸtirin
-- TÃ¼m tablolar iÃ§in RLS'yi etkinleÅŸtir
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.mevzuat_documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.mevzuat_embeddings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.search_logs ENABLE ROW LEVEL SECURITY;
4.2 GÃ¼venlik PolitikalarÄ±nÄ± OluÅŸturun
-- ============================================================
-- USER PROFILES POLÄ°TÄ°KALARI
-- ============================================================
CREATE POLICY "KullanÄ±cÄ±lar kendi profilini gÃ¶rebilir" ON public.user_profiles
    FOR SELECT USING (auth.uid() = id);
CREATE POLICY "KullanÄ±cÄ±lar kendi profilini gÃ¼ncelleyebilir" ON public.user_profiles
    FOR UPDATE USING (auth.uid() = id);
CREATE POLICY "Adminler tÃ¼m profilleri gÃ¶rebilir" ON public.user_profiles
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.user_profiles 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );
-- ============================================================
-- DOCUMENTS POLÄ°TÄ°KALARI
-- ============================================================
CREATE POLICY "Herkes tamamlanmÄ±ÅŸ belgeleri gÃ¶rebilir" ON public.mevzuat_documents
    FOR SELECT USING (status = 'completed');
CREATE POLICY "Adminler tÃ¼m belgeleri yÃ¶netebilir" ON public.mevzuat_documents
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.user_profiles 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );
-- ============================================================
-- EMBEDDINGS POLÄ°TÄ°KALARI
-- ============================================================
CREATE POLICY "Herkes embeddings'lerde arama yapabilir" ON public.mevzuat_embeddings
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.mevzuat_documents 
            WHERE id = document_id AND status = 'completed'
        )
    );
CREATE POLICY "Adminler embeddings'leri yÃ¶netebilir" ON public.mevzuat_embeddings
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.user_profiles 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );
-- ============================================================
-- SEARCH LOGS POLÄ°TÄ°KALARI
-- ============================================================
CREATE POLICY "KullanÄ±cÄ±lar kendi arama geÃ§miÅŸini gÃ¶rebilir" ON public.search_logs
    FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Herkes arama logu ekleyebilir" ON public.search_logs
    FOR INSERT WITH CHECK (true);
CREATE POLICY "Adminler tÃ¼m arama loglarÄ±nÄ± gÃ¶rebilir" ON public.search_logs
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.user_profiles 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );
ðŸŽ¯ AdÄ±m 5: VektÃ¶r Arama Fonksiyonu
5.1 Ana Arama Fonksiyonunu OluÅŸturun
-- ============================================================
-- VEKTÃ–R ARAMA FONKSÄ°YONU
-- ============================================================
CREATE OR REPLACE FUNCTION search_embeddings(
    query_embedding vector(1536),
    match_threshold float DEFAULT 0.7,
    match_count int DEFAULT 10
)
RETURNS TABLE (
    id uuid,
    document_id uuid,
    content text,
    similarity float,
    document_title text,
    document_filename text
)
LANGUAGE sql STABLE
AS $$
    SELECT 
        e.id,
        e.document_id,
        e.content,
        1 - (e.embedding <=> query_embedding) AS similarity,
        d.title AS document_title,
        d.filename AS document_filename
    FROM mevzuat_embeddings e
    JOIN mevzuat_documents d ON e.document_id = d.id
    WHERE 
        d.status = 'completed'
        AND 1 - (e.embedding <=> query_embedding) > match_threshold
    ORDER BY e.embedding <=> query_embedding
    LIMIT match_count;
$$;
ðŸŽ¯ AdÄ±m 6: Otomatik Trigger'lar ve Fonksiyonlar
6.1 KullanÄ±cÄ± Profili Otomatik OluÅŸturma
-- ============================================================
-- YENÄ° KULLANICI KAYDINDAN SONRA PROFÄ°L OLUÅžTURMA
-- ============================================================
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
    INSERT INTO public.user_profiles (id, full_name, role)
    VALUES (
        new.id, 
        COALESCE(new.raw_user_meta_data->>'full_name', new.email),
        COALESCE(new.raw_user_meta_data->>'role', 'user')
    );
    RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Trigger'Ä± oluÅŸtur
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
6.2 Otomatik Zaman DamgasÄ± GÃ¼ncellemesi
-- ============================================================
-- OTOMATIK UPDATED_AT GÃœNCELLEMESÄ°
-- ============================================================
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Trigger'larÄ± uygula
CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON public.user_profiles
    FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
CREATE TRIGGER update_documents_updated_at BEFORE UPDATE ON public.mevzuat_documents
    FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
ðŸŽ¯ AdÄ±m 7: Performans Ä°ndeksleri
7.1 Ã–nemli Ä°ndeksleri OluÅŸturun
-- ============================================================
-- PERFORMANS Ä°NDEKSLERÄ°
-- ============================================================
CREATE INDEX IF NOT EXISTS idx_embeddings_document_id ON public.mevzuat_embeddings(document_id);
CREATE INDEX IF NOT EXISTS idx_embeddings_vector ON public.mevzuat_embeddings USING ivfflat (embedding vector_cosine_ops);
CREATE INDEX IF NOT EXISTS idx_documents_status ON public.mevzuat_documents(status);
CREATE INDEX IF NOT EXISTS idx_documents_upload_date ON public.mevzuat_documents(upload_date);
CREATE INDEX IF NOT EXISTS idx_search_logs_user_id ON public.search_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_search_logs_created_at ON public.search_logs(created_at);